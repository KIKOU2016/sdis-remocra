/**
 * This class is generated by jOOQ
 */
package fr.sdis83.remocra.db.model.prevarisc.tables;


import fr.sdis83.remocra.db.model.prevarisc.Keys;
import fr.sdis83.remocra.db.model.prevarisc.Prevarisc;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Table tampon des établissement pour mise à jour des alertes dans Remocra
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Etablissement extends TableImpl<Record> {

	private static final long serialVersionUID = -1904007795;

	/**
	 * The reference instance of <code>prevarisc.etablissement</code>
	 */
	public static final Etablissement ETABLISSEMENT = new Etablissement();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>prevarisc.etablissement.id_etablissement</code>. Identifiant de l'établissement
	 */
	public final TableField<Record, Integer> ID_ETABLISSEMENT = createField("id_etablissement", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Identifiant de l'établissement");

	/**
	 * The column <code>prevarisc.etablissement.nom</code>. Nom de l'établissement
	 */
	public final TableField<Record, String> NOM = createField("nom", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Nom de l'établissement");

	/**
	 * The column <code>prevarisc.etablissement.longitude</code>. Longitude de l'établissement
	 */
	public final TableField<Record, Double> LONGITUDE = createField("longitude", org.jooq.impl.SQLDataType.DOUBLE, this, "Longitude de l'établissement");

	/**
	 * The column <code>prevarisc.etablissement.latitude</code>. Latitude de l'établissement
	 */
	public final TableField<Record, Double> LATITUDE = createField("latitude", org.jooq.impl.SQLDataType.DOUBLE, this, "Latitude de l'établissement");

	/**
	 * The column <code>prevarisc.etablissement.rue</code>. Nom de la rue de l'établissement
	 */
	public final TableField<Record, String> RUE = createField("rue", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Nom de la rue de l'établissement");

	/**
	 * The column <code>prevarisc.etablissement.insee</code>. Numéro INSEE de la commune de l'établissement
	 */
	public final TableField<Record, String> INSEE = createField("insee", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Numéro INSEE de la commune de l'établissement");

	/**
	 * The column <code>prevarisc.etablissement.date_maj</code>. Date de mise à jour de l'établissement
	 */
	public final TableField<Record, Date> DATE_MAJ = createField("date_maj", org.jooq.impl.SQLDataType.DATE, this, "Date de mise à jour de l'établissement");

	/**
	 * Create a <code>prevarisc.etablissement</code> table reference
	 */
	public Etablissement() {
		this("etablissement", null);
	}

	/**
	 * Create an aliased <code>prevarisc.etablissement</code> table reference
	 */
	public Etablissement(String alias) {
		this(alias, ETABLISSEMENT);
	}

	private Etablissement(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private Etablissement(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Prevarisc.PREVARISC, aliased, parameters, "Table tampon des établissement pour mise à jour des alertes dans Remocra");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.ETABLISSEMENT_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.ETABLISSEMENT_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Etablissement as(String alias) {
		return new Etablissement(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Etablissement rename(String name) {
		return new Etablissement(name, null);
	}
}
