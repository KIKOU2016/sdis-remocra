// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.sdis83.remocra.domain.remocra;

import fr.sdis83.remocra.domain.remocra.TypeAlerteElt;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TypeAlerteElt_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager TypeAlerteElt.entityManager;
    
    public static final List<String> TypeAlerteElt.fieldNames4OrderClauseFilter = java.util.Arrays.asList("id", "nom", "code", "actif", "sousTypeAlerteElts");
    
    public static final EntityManager TypeAlerteElt.entityManager() {
        EntityManager em = new TypeAlerteElt().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long TypeAlerteElt.countTypeAlerteElts() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TypeAlerteElt o", Long.class).getSingleResult();
    }
    
    public static List<TypeAlerteElt> TypeAlerteElt.findAllTypeAlerteElts() {
        return entityManager().createQuery("SELECT o FROM TypeAlerteElt o", TypeAlerteElt.class).getResultList();
    }
    
    public static List<TypeAlerteElt> TypeAlerteElt.findAllTypeAlerteElts(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM TypeAlerteElt o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, TypeAlerteElt.class).getResultList();
    }
    
    public static TypeAlerteElt TypeAlerteElt.findTypeAlerteElt(Long id) {
        if (id == null) return null;
        return entityManager().find(TypeAlerteElt.class, id);
    }
    
    public static List<TypeAlerteElt> TypeAlerteElt.findTypeAlerteEltEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TypeAlerteElt o", TypeAlerteElt.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<TypeAlerteElt> TypeAlerteElt.findTypeAlerteEltEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM TypeAlerteElt o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, TypeAlerteElt.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void TypeAlerteElt.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void TypeAlerteElt.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TypeAlerteElt attached = TypeAlerteElt.findTypeAlerteElt(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void TypeAlerteElt.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void TypeAlerteElt.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public TypeAlerteElt TypeAlerteElt.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TypeAlerteElt merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
