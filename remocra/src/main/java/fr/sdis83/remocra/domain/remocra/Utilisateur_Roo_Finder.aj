// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.sdis83.remocra.domain.remocra;

import fr.sdis83.remocra.domain.remocra.Organisme;
import fr.sdis83.remocra.domain.remocra.Utilisateur;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Utilisateur_Roo_Finder {
    
    public static Long Utilisateur.countFindUtilisateursByEmail(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = Utilisateur.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Utilisateur AS o WHERE o.email = :email", Long.class);
        q.setParameter("email", email);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Utilisateur.countFindUtilisateursByIdentifiant(String identifiant) {
        if (identifiant == null || identifiant.length() == 0) throw new IllegalArgumentException("The identifiant argument is required");
        EntityManager em = Utilisateur.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Utilisateur AS o WHERE o.identifiant = :identifiant", Long.class);
        q.setParameter("identifiant", identifiant);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Utilisateur.countFindUtilisateursByOrganisme(Organisme organisme) {
        if (organisme == null) throw new IllegalArgumentException("The organisme argument is required");
        EntityManager em = Utilisateur.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Utilisateur AS o WHERE o.organisme = :organisme", Long.class);
        q.setParameter("organisme", organisme);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Utilisateur> Utilisateur.findUtilisateursByEmail(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = Utilisateur.entityManager();
        TypedQuery<Utilisateur> q = em.createQuery("SELECT o FROM Utilisateur AS o WHERE o.email = :email", Utilisateur.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<Utilisateur> Utilisateur.findUtilisateursByEmail(String email, String sortFieldName, String sortOrder) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        EntityManager em = Utilisateur.entityManager();
        String jpaQuery = "SELECT o FROM Utilisateur AS o WHERE o.email = :email";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Utilisateur> q = em.createQuery(jpaQuery, Utilisateur.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<Utilisateur> Utilisateur.findUtilisateursByIdentifiant(String identifiant) {
        if (identifiant == null || identifiant.length() == 0) throw new IllegalArgumentException("The identifiant argument is required");
        EntityManager em = Utilisateur.entityManager();
        TypedQuery<Utilisateur> q = em.createQuery("SELECT o FROM Utilisateur AS o WHERE o.identifiant = :identifiant", Utilisateur.class);
        q.setParameter("identifiant", identifiant);
        return q;
    }
    
    public static TypedQuery<Utilisateur> Utilisateur.findUtilisateursByIdentifiant(String identifiant, String sortFieldName, String sortOrder) {
        if (identifiant == null || identifiant.length() == 0) throw new IllegalArgumentException("The identifiant argument is required");
        EntityManager em = Utilisateur.entityManager();
        String jpaQuery = "SELECT o FROM Utilisateur AS o WHERE o.identifiant = :identifiant";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Utilisateur> q = em.createQuery(jpaQuery, Utilisateur.class);
        q.setParameter("identifiant", identifiant);
        return q;
    }
    
    public static TypedQuery<Utilisateur> Utilisateur.findUtilisateursByOrganisme(Organisme organisme) {
        if (organisme == null) throw new IllegalArgumentException("The organisme argument is required");
        EntityManager em = Utilisateur.entityManager();
        TypedQuery<Utilisateur> q = em.createQuery("SELECT o FROM Utilisateur AS o WHERE o.organisme = :organisme", Utilisateur.class);
        q.setParameter("organisme", organisme);
        return q;
    }
    
    public static TypedQuery<Utilisateur> Utilisateur.findUtilisateursByOrganisme(Organisme organisme, String sortFieldName, String sortOrder) {
        if (organisme == null) throw new IllegalArgumentException("The organisme argument is required");
        EntityManager em = Utilisateur.entityManager();
        String jpaQuery = "SELECT o FROM Utilisateur AS o WHERE o.organisme = :organisme";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Utilisateur> q = em.createQuery(jpaQuery, Utilisateur.class);
        q.setParameter("organisme", organisme);
        return q;
    }
    
}
