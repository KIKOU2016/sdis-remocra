// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.sdis83.remocra.domain.pdi;

import fr.sdis83.remocra.domain.pdi.ModeleTraitement;
import fr.sdis83.remocra.domain.pdi.ModeleTraitementParametre;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ModeleTraitementParametre_Roo_Finder {
    
    public static Long ModeleTraitementParametre.countFindModeleTraitementParametresByNom(String nom) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        EntityManager em = ModeleTraitementParametre.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ModeleTraitementParametre AS o WHERE o.nom = :nom", Long.class);
        q.setParameter("nom", nom);
        return ((Long) q.getSingleResult());
    }
    
    public static Long ModeleTraitementParametre.countFindModeleTraitementParametresByNomAndIdmodele(String nom, ModeleTraitement idmodele) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        if (idmodele == null) throw new IllegalArgumentException("The idmodele argument is required");
        EntityManager em = ModeleTraitementParametre.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ModeleTraitementParametre AS o WHERE o.nom = :nom AND o.idmodele = :idmodele", Long.class);
        q.setParameter("nom", nom);
        q.setParameter("idmodele", idmodele);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ModeleTraitementParametre> ModeleTraitementParametre.findModeleTraitementParametresByNom(String nom) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        EntityManager em = ModeleTraitementParametre.entityManager();
        TypedQuery<ModeleTraitementParametre> q = em.createQuery("SELECT o FROM ModeleTraitementParametre AS o WHERE o.nom = :nom", ModeleTraitementParametre.class);
        q.setParameter("nom", nom);
        return q;
    }
    
    public static TypedQuery<ModeleTraitementParametre> ModeleTraitementParametre.findModeleTraitementParametresByNom(String nom, String sortFieldName, String sortOrder) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        EntityManager em = ModeleTraitementParametre.entityManager();
        String jpaQuery = "SELECT o FROM ModeleTraitementParametre AS o WHERE o.nom = :nom";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ModeleTraitementParametre> q = em.createQuery(jpaQuery, ModeleTraitementParametre.class);
        q.setParameter("nom", nom);
        return q;
    }
    
    public static TypedQuery<ModeleTraitementParametre> ModeleTraitementParametre.findModeleTraitementParametresByNomAndIdmodele(String nom, ModeleTraitement idmodele) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        if (idmodele == null) throw new IllegalArgumentException("The idmodele argument is required");
        EntityManager em = ModeleTraitementParametre.entityManager();
        TypedQuery<ModeleTraitementParametre> q = em.createQuery("SELECT o FROM ModeleTraitementParametre AS o WHERE o.nom = :nom AND o.idmodele = :idmodele", ModeleTraitementParametre.class);
        q.setParameter("nom", nom);
        q.setParameter("idmodele", idmodele);
        return q;
    }
    
    public static TypedQuery<ModeleTraitementParametre> ModeleTraitementParametre.findModeleTraitementParametresByNomAndIdmodele(String nom, ModeleTraitement idmodele, String sortFieldName, String sortOrder) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        if (idmodele == null) throw new IllegalArgumentException("The idmodele argument is required");
        EntityManager em = ModeleTraitementParametre.entityManager();
        String jpaQuery = "SELECT o FROM ModeleTraitementParametre AS o WHERE o.nom = :nom AND o.idmodele = :idmodele";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<ModeleTraitementParametre> q = em.createQuery(jpaQuery, ModeleTraitementParametre.class);
        q.setParameter("nom", nom);
        q.setParameter("idmodele", idmodele);
        return q;
    }
    
}
