<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd         http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/jdbc
http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

	<import resource="applicationContext.xml" />
	<import resource="applicationContext-security.xml" />
	
	<!-- Force l'utilisation du dialect H2 en test. A utiliser en ajoutant le 
		fichier /META-INF/services/org.hibernatespatial.spi.SpatialDialectProvider 
		qui contient le provider vers le Dialect... -->
	<bean id="hbSpatialSystemPropertySetter"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" value="#{@systemProperties}" />
		<property name="targetMethod" value="putAll" />
		<property name="arguments">
			<!-- The new Properties -->
			<util:properties>
				<prop key="hibernate.spatial.dialect">fr.sdis83.remocra.domain.dialect.RemocraH2Dialect</prop>
			</util:properties>
		</property>
	</bean>

	<!-- <jdbc:embedded-database id="dataSource" type="H2"> <jdbc:script location="classpath:/META-INF/spring/schema-test.sql" 
		/> </jdbc:embedded-database> <bean class="org.springframework.orm.jpa.JpaTransactionManager" 
		id="transactionManager"> <property name="entityManagerFactory" ref="entityManagerFactory" 
		/> </bean> <bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" 
		id="entityManagerFactory"> <property name="persistenceUnitName" value="persistenceUnit" 
		/> <property name="dataSource" ref="dataSource" /> </bean> -->
	<!-- provides a H2 console to look into the db if necessary -->
	<bean id="org.h2.tools.Server-WebServer" class="org.h2.tools.Server"
		factory-method="createWebServer" depends-on="dataSource" init-method="start"
		lazy-init="false">
		<constructor-arg value="-web,-webPort,11111" />
	</bean>

	<bean
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		id="entityManagerFactory">
		<property name="persistenceUnitName" value="persistenceUnitInMemory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="dataSource" class="fr.sdis83.remocra.domain.datasource.GeoDbDataSource"
		depends-on="hbSpatialSystemPropertySetter">
		<property name="driverClass" value="org.h2.Driver" />
		<property name="url"
			value="jdbc:h2:mem:test;INIT=CREATE SCHEMA IF NOT EXISTS pdi\;CREATE SCHEMA IF NOT EXISTS remocra;DB_CLOSE_DELAY=1000;MVCC=true" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>


	<!-- Permet de faire des test d'integration sur les controller -->
	<bean class="org.springframework.mock.web.MockServletContext" />

</beans>
